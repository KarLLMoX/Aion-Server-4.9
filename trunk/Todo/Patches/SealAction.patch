Index: data/scripts/system/database/mysql5/MySQL5BrokerDAO.java
===================================================================
--- data/scripts/system/database/mysql5/MySQL5BrokerDAO.java	(revision 292)
+++ data/scripts/system/database/mysql5/MySQL5BrokerDAO.java	(working copy)
@@ -117,10 +117,11 @@
                     int max_authorize = rset.getInt("authorize");
                     int isAmplified = rset.getInt("is_amplified");
                     int buffSkill = rset.getInt("buff_skill");
-
+                    int seal = rset.getInt("seal");
+                    Timestamp sealTime = rset.getTimestamp("seal_time");
                     brokerItems.add(new Item(itemUniqueId, itemId, itemCount, itemColor, colorExpireTime, itemCreator, expireTime,
                             activationCount, false, false, slot, location, enchant, itemSkin, fusionedItem, optionalSocket,
-                            optionalFusionSocket, charge, randomBonus, rndCount, packCount, max_authorize, false, isAmplified == 1, buffSkill));
+                            optionalFusionSocket, charge, randomBonus, rndCount, packCount, max_authorize, false, isAmplified == 1, buffSkill, seal, sealTime));
                 }
             }
         });
Index: data/scripts/system/database/mysql5/MySQL5InventoryDAO.java
===================================================================
--- data/scripts/system/database/mysql5/MySQL5InventoryDAO.java	(revision 292)
+++ data/scripts/system/database/mysql5/MySQL5InventoryDAO.java	(working copy)
@@ -18,6 +18,7 @@
 
 import com.aionemu.commons.database.DB;
 import com.aionemu.commons.database.DatabaseFactory;
+import com.aionemu.commons.database.IUStH;
 import com.aionemu.commons.utils.GenericValidator;
 import com.aionemu.gameserver.dao.InventoryDAO;
 import com.aionemu.gameserver.dao.MySQL5DAOUtils;
@@ -43,6 +44,7 @@
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
 import java.sql.SQLException;
+import java.sql.Timestamp;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.List;
@@ -53,9 +55,9 @@
 public class MySQL5InventoryDAO extends InventoryDAO {
 
     private static final Logger log = LoggerFactory.getLogger(MySQL5InventoryDAO.class);
-    public static final String SELECT_QUERY = "SELECT `item_unique_id`, `item_id`, `item_count`, `item_color`, `color_expires`, `item_creator`, `expire_time`, `activation_count`, `is_equiped`, `is_soul_bound`, `slot`, `enchant`, `item_skin`, `fusioned_item`, `optional_socket`, `optional_fusion_socket`, `charge`, `rnd_bonus`, `rnd_count`, `pack_count`, `authorize`, `is_packed`, `is_amplified`, `buff_skill` FROM `inventory` WHERE `item_owner`=? AND `item_location`=? AND `is_equiped`=?";
-    public static final String INSERT_QUERY = "INSERT INTO `inventory` (`item_unique_id`, `item_id`, `item_count`, `item_color`, `color_expires`, `item_creator`, `expire_time`, `activation_count`, `item_owner`, `is_equiped`, is_soul_bound, `slot`, `item_location`, `enchant`, `item_skin`, `fusioned_item`, `optional_socket`, `optional_fusion_socket`, `charge`, `rnd_bonus`, `rnd_count`, `pack_count`, `authorize`, `is_packed`, `is_amplified`, `buff_skill`) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
-    public static final String UPDATE_QUERY = "UPDATE inventory SET  item_count=?, item_color=?, color_expires=?, item_creator=?, expire_time=?, activation_count=?,item_owner=?, is_equiped=?, is_soul_bound=?, slot=?, item_location=?, enchant=?, item_skin=?, fusioned_item=?, optional_socket=?, optional_fusion_socket=?, charge=?, rnd_bonus=?, rnd_count=?, pack_count=?, authorize=?, is_packed=?, is_amplified=?, buff_skill=? WHERE item_unique_id=?";
+    public static final String SELECT_QUERY = "SELECT `item_unique_id`, `item_id`, `item_count`, `item_color`, `color_expires`, `item_creator`, `expire_time`, `activation_count`, `is_equiped`, `is_soul_bound`, `slot`, `enchant`, `item_skin`, `fusioned_item`, `optional_socket`, `optional_fusion_socket`, `charge`, `rnd_bonus`, `rnd_count`, `pack_count`, `authorize`, `is_packed`, `is_amplified`, `buff_skill`, `seal`, `seal_time` FROM `inventory` WHERE `item_owner`=? AND `item_location`=? AND `is_equiped`=?";
+    public static final String INSERT_QUERY = "INSERT INTO `inventory` (`item_unique_id`, `item_id`, `item_count`, `item_color`, `color_expires`, `item_creator`, `expire_time`, `activation_count`, `item_owner`, `is_equiped`, is_soul_bound, `slot`, `item_location`, `enchant`, `item_skin`, `fusioned_item`, `optional_socket`, `optional_fusion_socket`, `charge`, `rnd_bonus`, `rnd_count`, `pack_count`, `authorize`, `is_packed`, `is_amplified`, `buff_skill`, `seal`, `seal_time`) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
+    public static final String UPDATE_QUERY = "UPDATE inventory SET  item_count=?, item_color=?, color_expires=?, item_creator=?, expire_time=?, activation_count=?,item_owner=?, is_equiped=?, is_soul_bound=?, slot=?, item_location=?, enchant=?, item_skin=?, fusioned_item=?, optional_socket=?, optional_fusion_socket=?, charge=?, rnd_bonus=?, rnd_count=?, pack_count=?, authorize=?, is_packed=?, is_amplified=?, buff_skill=?, seal=?, seal_time=? WHERE item_unique_id=?";
     public static final String DELETE_QUERY = "DELETE FROM inventory WHERE item_unique_id=?";
     public static final String DELETE_CLEAN_QUERY = "DELETE FROM inventory WHERE item_owner=? AND item_location != 2"; // legion warehouse needs not to be excluded, since players and legions are IDAwareDAOs
     public static final String SELECT_ACCOUNT_QUERY = "SELECT `account_id` FROM `players` WHERE `id`=?";
@@ -233,9 +235,11 @@
         int max_authorize = rset.getInt("authorize");
         int isAmplified = rset.getInt("is_amplified");
         int buffSkill = rset.getInt("buff_skill");
+        int seal = rset.getInt("seal");
+        Timestamp sealTime = rset.getTimestamp("seal_time");
         Item item = new Item(itemUniqueId, itemId, itemCount, itemColor, colorExpireTime, itemCreator, expireTime, activationCount,
                 isEquiped == 1, isSoulBound == 1, slot, storage, enchant, itemSkin, fusionedItem, optionalSocket,
-                optionalFusionSocket, charge, randomBonus, rndCount, packCount, max_authorize, isPacked == 1, isAmplified == 1, buffSkill);
+                optionalFusionSocket, charge, randomBonus, rndCount, packCount, max_authorize, isPacked == 1, isAmplified == 1, buffSkill, seal, sealTime);
         return item;
     }
 
@@ -408,6 +412,8 @@
                 stmt.setBoolean(24, item.isPacked());
                 stmt.setBoolean(25, item.isAmplified());
                 stmt.setInt(26, item.getBuffSkill());
+                stmt.setInt(27, item.getSeal());
+                stmt.setTimestamp(28, item.getSealTime());
                 stmt.addBatch();
             }
 
@@ -458,7 +464,9 @@
                 stmt.setBoolean(22, item.isPacked());
                 stmt.setBoolean(23, item.isAmplified());
                 stmt.setInt(24, item.getBuffSkill());
-                stmt.setInt(25, item.getObjectId());
+                stmt.setInt(24, item.getSeal());
+                stmt.setTimestamp(25, item.getSealTime());				
+                stmt.setInt(26, item.getObjectId());
                 stmt.addBatch();
             }
 
@@ -503,10 +511,10 @@
      */
     @Override
     public boolean deletePlayerItems(final int playerId) {
-        Connection con = null;
+        Connection cons = null;
         try {
-            con = DatabaseFactory.getConnection();
-            PreparedStatement stmt = con.prepareStatement(DELETE_CLEAN_QUERY);
+            cons = DatabaseFactory.getConnection();
+            PreparedStatement stmt = cons.prepareStatement(DELETE_CLEAN_QUERY);
             stmt.setInt(1, playerId);
             stmt.execute();
             stmt.close();
@@ -514,8 +522,30 @@
             log.error("Error Player all items. PlayerObjId: " + playerId, e);
             return false;
         } finally {
-            DatabaseFactory.close(con);
+            DatabaseFactory.close(cons);
         }
+
+        DB.insertUpdate("UPDATE deleted_inventory set increase_time = ? where item_owner = ?", new IUStH() {
+            @Override
+            public void handleInsertUpdate(PreparedStatement preparedStatement) throws SQLException {
+                preparedStatement.setTimestamp(1, new Timestamp(System.currentTimeMillis()));
+                preparedStatement.setInt(2, playerId);
+                preparedStatement.execute();
+            }
+        });
+
+        Connection con = null;
+        try {
+            con = DatabaseFactory.getConnection();
+            PreparedStatement stmt = con.prepareStatement(DELETE_CLEAN_QUERY);
+            stmt.setInt(1, playerId);
+            stmt.execute();
+        } catch (Exception e) {
+        	log.error("Error Player all items. PlayerObjId: " + playerId, e);
+        	return false;
+        } finally {
+        	DatabaseFactory.close(con);
+        }
         return true;
     }
 
Index: data/scripts/system/database/mysql5/MySQL5LegionDAO.java
===================================================================
--- data/scripts/system/database/mysql5/MySQL5LegionDAO.java	(revision 292)
+++ data/scripts/system/database/mysql5/MySQL5LegionDAO.java	(working copy)
@@ -76,7 +76,7 @@
     /**
      * Storage Queries *
      */
-    private static final String SELECT_STORAGE_QUERY = "SELECT `item_unique_id`, `item_id`, `item_count`, `item_color`, `color_expires`, `item_creator`, `expire_time`, `activation_count`, `is_equiped`, `slot`, `enchant`, `item_skin`, `fusioned_item`, `optional_socket`, `optional_fusion_socket`, `charge`, `rnd_bonus`, `rnd_count`, `pack_count`, `authorize`, `is_packed`, `is_amplified`, `buff_skill` FROM `inventory` WHERE `item_owner`=? AND `item_location`=? AND `is_equiped`=?";
+    private static final String SELECT_STORAGE_QUERY = "SELECT `item_unique_id`, `item_id`, `item_count`, `item_color`, `color_expires`, `item_creator`, `expire_time`, `activation_count`, `is_equiped`, `slot`, `enchant`, `item_skin`, `fusioned_item`, `optional_socket`, `optional_fusion_socket`, `charge`, `rnd_bonus`, `rnd_count`, `pack_count`, `authorize`, `is_packed`, `is_amplified`, `buff_skill`, `seal`, `seal_time` FROM `inventory` WHERE `item_owner`=? AND `item_location`=? AND `is_equiped`=?";
     /**
      * History Queries *
      */
@@ -591,9 +591,11 @@
                     int isPacked = rset.getInt("is_packed");
                     int isAmplified = rset.getInt("is_amplified");
                     int buffSkill = rset.getInt("buff_skill");
+                    int seal = rset.getInt("seal");
+                    Timestamp sealTime = rset.getTimestamp("seal_time");
                     Item item = new Item(itemUniqueId, itemId, itemCount, itemColor, colorExpireTime, itemCreator, expireTime, activationCount,
                             isEquiped == 1, false, slot, storage, enchant, itemSkin, fusionedItem, optionalSocket,
-                            optionalFusionSocket, charge, randomBonus, rndCount, packCount, max_authorize, isPacked == 1, isAmplified == 1, buffSkill);
+                            optionalFusionSocket, charge, randomBonus, rndCount, packCount, max_authorize, isPacked == 1, isAmplified == 1, buffSkill, seal, sealTime);
                     item.setPersistentState(PersistentState.UPDATED);
                     inventory.onLoadHandler(item);
                 }
Index: data/scripts/system/database/mysql5/MySQL5MailDAO.java
===================================================================
--- data/scripts/system/database/mysql5/MySQL5MailDAO.java	(revision 292)
+++ data/scripts/system/database/mysql5/MySQL5MailDAO.java	(working copy)
@@ -156,9 +156,11 @@
                     int isPacked = rset.getInt("is_packed");
                     int isAmplified = rset.getInt("is_amplified");
                     int buffSkill = rset.getInt("buff_skill");
+                    int seal = rset.getInt("seal");
+                    Timestamp sealTime = rset.getTimestamp("seal_time");
                     Item item = new Item(itemUniqueId, itemId, itemCount, itemColor, colorExpireTime, itemCreator, expireTime, activationCount,
                             isEquiped == 1, isSoulBound == 1, slot, StorageType.MAILBOX.getId(), enchant, itemSkin, fusionedItem,
-                            optionalSocket, optionalFusionSocket, charge, randomBonus, rndCount, packCount, max_authorize, isPacked == 1, isAmplified == 1, buffSkill);
+                            optionalSocket, optionalFusionSocket, charge, randomBonus, rndCount, packCount, max_authorize, isPacked == 1, isAmplified == 1, buffSkill, seal, sealTime);
                     item.setPersistentState(PersistentState.UPDATED);
                     mailboxItems.add(item);
                 }
Index: data/static_data/items/item_templates.xml
===================================================================
--- data/static_data/items/item_templates.xml	(revision 292)
+++ data/static_data/items/item_templates.xml	(working copy)
@@ -273597,12 +273597,36 @@
         <godstone skillid="8541" skilllvl="1" probability="30" probabilityleft="15"/>
     </item_template>
     <item_template id="168100000" name="Pattern Reshaper" desc="1486179" name_desc="skin_remover" level="1" mask="4222" category="NONE" max_stack_count="1" item_type="NORMAL" quality="COMMON" price="30000" race="PC_ALL" restrict="1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1" bonus_apply="INVENTORY"/>
-    <item_template id="168200001" name="Sealing Scroll (Test)" desc="1538589" name_desc="seal_scroll_test_01" level="1" mask="12414" category="NONE" max_stack_count="100" item_type="NORMAL" quality="COMMON" price="100" race="PC_ALL" restrict="1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1" bonus_apply="INVENTORY" activate_count="1"/>
-    <item_template id="168200002" name="Seal Scroll" desc="1550935" name_desc="seal_scroll_01" level="1" mask="12352" category="NONE" max_stack_count="100" item_type="NORMAL" quality="COMMON" price="10000" race="PC_ALL" restrict="1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1" bonus_apply="INVENTORY" activate_count="1"/>
-    <item_template id="168210001" name="Common Seal Removal Scroll (Test)" desc="1538593" name_desc="normal_unseal_scroll_test_01" level="1" mask="12414" category="NONE" max_stack_count="100" item_type="NORMAL" quality="COMMON" price="100" race="PC_ALL" restrict="1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1" bonus_apply="INVENTORY" activate_count="1"/>
-    <item_template id="168210002" name="Seal Breaker" desc="1550937" name_desc="normal_unseal_scroll_01" level="1" mask="12352" category="NONE" max_stack_count="100" item_type="NORMAL" quality="COMMON" price="10000" race="PC_ALL" restrict="1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1" bonus_apply="INVENTORY" activate_count="1"/>
-    <item_template id="168220001" name="Special Seal Removal Scroll (Test)" desc="1538597" name_desc="special_unseal_scall_test_1" level="1" mask="4168" category="NONE" max_stack_count="100" item_type="NORMAL" quality="RARE" price="100" race="PC_ALL" restrict="1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1" bonus_apply="INVENTORY" activate_count="1" expire_time="60"/>
-    <item_template id="168220002" name="Seal Removal Scroll" desc="1550939" name_desc="special_unseal_scall_1" level="1" mask="4424" category="NONE" max_stack_count="100" item_type="NORMAL" quality="RARE" price="100" race="PC_ALL" restrict="1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1" bonus_apply="INVENTORY" activate_count="1" expire_time="30"/>
+    <item_template id="168200001" name="Sealing Scroll (Test)" desc="1538589" name_desc="seal_scroll_test_01" level="1" mask="12414" category="NONE" max_stack_count="100" item_type="NORMAL" quality="COMMON" price="100" race="PC_ALL" restrict="1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1" bonus_apply="INVENTORY" activate_count="1">
+    	<actions>
+    		<seal/>
+    	</actions>
+    </item_template>
+    <item_template id="168200002" name="Seal Scroll" desc="1550935" name_desc="seal_scroll_01" level="1" mask="12352" category="NONE" max_stack_count="100" item_type="NORMAL" quality="COMMON" price="10000" race="PC_ALL" restrict="1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1" bonus_apply="INVENTORY" activate_count="1">
+    	<actions>
+    		<seal/>
+    	</actions>
+    </item_template>
+    <item_template id="168210001" name="Common Seal Removal Scroll (Test)" desc="1538593" name_desc="normal_unseal_scroll_test_01" level="1" mask="12414" category="NONE" max_stack_count="100" item_type="NORMAL" quality="COMMON" price="100" race="PC_ALL" restrict="1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1" bonus_apply="INVENTORY" activate_count="1">
+    	<actions>
+            <seal day="7" maxcount="3" unseal="true"/>
+        </actions>
+    </item_template>
+    <item_template id="168210002" name="Seal Breaker" desc="1550937" name_desc="normal_unseal_scroll_01" level="1" mask="12352" category="NONE" max_stack_count="100" item_type="NORMAL" quality="COMMON" price="10000" race="PC_ALL" restrict="1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1" bonus_apply="INVENTORY" activate_count="1">
+    	<actions>
+            <seal day="7" maxcount="3" unseal="true"/>
+        </actions>
+    </item_template>
+    <item_template id="168220001" name="Special Seal Removal Scroll (Test)" desc="1538597" name_desc="special_unseal_scall_test_1" level="1" mask="4168" category="NONE" max_stack_count="100" item_type="NORMAL" quality="RARE" price="100" race="PC_ALL" restrict="1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1" bonus_apply="INVENTORY" activate_count="1" expire_time="60">
+    	<actions>
+            <seal unseal="true"/>
+        </actions>
+    </item_template>
+    <item_template id="168220002" name="Seal Removal Scroll" desc="1550939" name_desc="special_unseal_scall_1" level="1" mask="4424" category="NONE" max_stack_count="100" item_type="NORMAL" quality="RARE" price="100" race="PC_ALL" restrict="1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1" bonus_apply="INVENTORY" activate_count="1" expire_time="30">
+    	<actions>
+            <seal unseal="true"/>
+        </actions>
+    </item_template>
     <item_template id="168300000" name="Test Individual Conditioning Item (Level 1)" desc="1540497" name_desc="charge_item_piece_test_01" level="1" mask="12414" category="SHARD" max_stack_count="1000" item_type="NORMAL" quality="COMMON" price="900000" race="PC_ALL" restrict="1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1" restrict_max="55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55" bonus_apply="INVENTORY" activate_count="1">
         <actions>
             <charge capacity="1"/>
Index: data/static_data/items/item_templates.xsd
===================================================================
--- data/static_data/items/item_templates.xsd	(revision 292)
+++ data/static_data/items/item_templates.xsd	(working copy)
@@ -213,6 +213,7 @@
             <xs:element name="multi_return_item" type="MultiReturnAction" minOccurs="0" maxOccurs="1"/>
             <xs:element name="godsocket" type="GodstoneAction" minOccurs="0" maxOccurs="1"/>
 	    <xs:element name="expreturn" type="ExpReturnAction" minOccurs="0" maxOccurs="1"/>
+	    <xs:element name="seal" type="SealAction" minOccurs="0" maxOccurs="1"/>
         </xs:sequence>
     </xs:complexType>
     <xs:complexType name="RideAction">
@@ -468,6 +469,15 @@
             <xs:extension base="AbstractItemAction"/>
         </xs:complexContent>
     </xs:complexType>
+    <xs:complexType name="SealAction">
+        <xs:complexContent>
+            <xs:extension base="AbstractItemAction">
+                <xs:attribute name="day" type="xs:int" use="optional"/>
+		<xs:attribute name="maxcount" type="xs:int" use="optional"/>
+                <xs:attribute name="unseal" type="xs:boolean" default="false"/>
+            </xs:extension>
+        </xs:complexContent>
+    </xs:complexType>
     <xs:simpleType name="equipType">
         <xs:restriction base="xs:string">
             <xs:enumeration value="ARMOR"/>
Index: sql/updates/seal_item.sql
===================================================================
--- sql/updates/seal_item.sql	(nonexistent)
+++ sql/updates/seal_item.sql	(working copy)
@@ -0,0 +1,2 @@
+ALTER TABLE `inventory` ADD `seal` int(11) NOT NULL DEFAULT '0';
+ALTER TABLE `inventory` ADD `seal_time` timestamp NULL default NULL;
\ No newline at end of file
Index: src/com/aionemu/gameserver/model/gameobjects/Item.java
===================================================================
--- src/com/aionemu/gameserver/model/gameobjects/Item.java	(revision 292)
+++ src/com/aionemu/gameserver/model/gameobjects/Item.java	(working copy)
@@ -35,10 +35,12 @@
 import com.aionemu.gameserver.model.templates.item.bonuses.StatBonusType;
 import com.aionemu.gameserver.network.aion.serverpackets.SM_SYSTEM_MESSAGE;
 import com.aionemu.gameserver.utils.PacketSendUtility;
+
 import org.apache.commons.lang.StringUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import java.sql.Timestamp;
 import java.util.*;
 
 /**
@@ -83,6 +85,8 @@
     private boolean isPacked = false;
     private boolean isAmplified = false;
     private int buffSkill;
+    private int seal;
+    private Timestamp sealTime;
 
     /**
      * Create simple item with minimum information
@@ -118,7 +122,7 @@
      */
     public Item(int objId, int itemId, long itemCount, int itemColor, int colorExpires, String itemCreator, int expireTime,
                 int activationCount, boolean isEquipped, boolean isSoulBound, long equipmentSlot, int itemLocation, int enchant, int itemSkin,
-                int fusionedItem, int optionalSocket, int optionalFusionSocket, int charge, int randomBonus, int rndCount, int packCount, int authorize, boolean isPacked, boolean isAmplified, int buffSkill) {
+                int fusionedItem, int optionalSocket, int optionalFusionSocket, int charge, int randomBonus, int rndCount, int packCount, int authorize, boolean isPacked, boolean isAmplified, int buffSkill, int seal, Timestamp sealTime) {
         super(objId);
 
         this.itemTemplate = DataManager.ITEM_DATA.getItemTemplate(itemId);
@@ -155,6 +159,8 @@
             }
         }
         updateChargeInfo(charge);
+        this.seal = seal;
+        this.sealTime = sealTime;
     }
 
     public final boolean setRndBonus() {
@@ -734,6 +740,22 @@
         return (getItemMask() & ItemMask.SELLABLE) == ItemMask.SELLABLE;
     }
 
+    public int getSeal() {
+        return seal;
+    }
+
+    public Timestamp getSealTime() {
+        return sealTime;
+    }
+
+    public void setSeal(int seal) {
+        this.seal = seal;
+    }
+
+    public void setSealTime(Timestamp timestamp) {
+        this.sealTime = timestamp;
+    }
+
     public boolean canApExtract() {
         return (getItemMask() & ItemMask.CAN_AP_EXTRACT) == ItemMask.CAN_AP_EXTRACT;
     }
Index: src/com/aionemu/gameserver/model/gameobjects/player/Player.java
===================================================================
--- src/com/aionemu/gameserver/model/gameobjects/player/Player.java	(revision 292)
+++ src/com/aionemu/gameserver/model/gameobjects/player/Player.java	(working copy)
@@ -283,6 +283,7 @@
     private boolean isInLiveParty = false;
 	//private int linkedSkill;
     private PlayerConquererProtectorData conquerorProtectorData;
+    public int sealcount;
     /**
      * Used for JUnit tests
      */
Index: src/com/aionemu/gameserver/model/templates/item/actions/ItemActions.java
===================================================================
--- src/com/aionemu/gameserver/model/templates/item/actions/ItemActions.java	(revision 292)
+++ src/com/aionemu/gameserver/model/templates/item/actions/ItemActions.java	(working copy)
@@ -61,7 +61,8 @@
             @XmlElement(name = "stenchant", type = AuthorizeAction.class),
             @XmlElement(name = "multi_return_item", type = MultiReturnAction.class),
             @XmlElement(name = "godsocket", type = GodstoneAction.class),
-            @XmlElement(name = "expreturn", type = ExpReturnAction.class)})
+            @XmlElement(name = "expreturn", type = ExpReturnAction.class),
+			@XmlElement(name = "seal", type = SealAction.class)})
     protected List<AbstractItemAction> itemActions;
 
     /**
Index: src/com/aionemu/gameserver/model/templates/item/actions/RideAction.java
===================================================================
--- src/com/aionemu/gameserver/model/templates/item/actions/RideAction.java	(revision 292)
+++ src/com/aionemu/gameserver/model/templates/item/actions/RideAction.java	(working copy)
@@ -82,9 +82,12 @@
             player.unsetPlayerMode(PlayerMode.RIDE);
             return;
         }
+        if ((player.getState() & CreatureState.PRIVATE_SHOP.getId()) == CreatureState.PRIVATE_SHOP.getId()) {
+            player.getController().cancelUseItem();
+            return;
+        }
 
-        PacketSendUtility.broadcastPacket(player, new SM_ITEM_USAGE_ANIMATION(player.getObjectId(),
-                parentItem.getObjectId(), parentItem.getItemId(), 3000, 0, 0), true);
+        PacketSendUtility.broadcastPacket(player, new SM_ITEM_USAGE_ANIMATION(player.getObjectId(), parentItem.getObjectId(), parentItem.getItemId(), 3000, 0, 0), true);
         final ItemUseObserver observer = new ItemUseObserver() {
             @Override
             public void abort() {
@@ -100,6 +103,10 @@
         player.getController().addTask(TaskId.ITEM_USE, ThreadPoolManager.getInstance().schedule(new Runnable() {
             @Override
             public void run() {
+                if ((player.getState() & CreatureState.PRIVATE_SHOP.getId()) == CreatureState.PRIVATE_SHOP.getId()) {
+                    player.getController().cancelUseItem();
+                    return;
+                }
                 player.unsetState(CreatureState.ACTIVE);
                 player.setState(CreatureState.RESTING);
                 player.getObserveController().removeObserver(observer);
Index: src/com/aionemu/gameserver/model/templates/item/actions/SealAction.java
===================================================================
--- src/com/aionemu/gameserver/model/templates/item/actions/SealAction.java	(nonexistent)
+++ src/com/aionemu/gameserver/model/templates/item/actions/SealAction.java	(working copy)
@@ -0,0 +1,129 @@
+/**
+ * This file is part of Aion-Lightning <aion-lightning.org>.
+ *
+ *  Aion-Lightning is free software: you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation, either version 3 of the License, or
+ *  (at your option) any later version.
+ *
+ *  Aion-Lightning is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU General Public License for more details. *
+ *  You should have received a copy of the GNU General Public License
+ *  along with Aion-Lightning.
+ *  If not, see <http://www.gnu.org/licenses/>.
+ */
+package com.aionemu.gameserver.model.templates.item.actions;
+
+import com.aionemu.commons.network.util.ThreadPoolManager;
+import com.aionemu.gameserver.controllers.observer.ItemUseObserver;
+import com.aionemu.gameserver.model.DescriptionId;
+import com.aionemu.gameserver.model.TaskId;
+import com.aionemu.gameserver.model.gameobjects.Item;
+import com.aionemu.gameserver.model.gameobjects.player.Player;
+import com.aionemu.gameserver.network.aion.serverpackets.SM_INVENTORY_UPDATE_ITEM;
+import com.aionemu.gameserver.network.aion.serverpackets.SM_ITEM_USAGE_ANIMATION;
+import com.aionemu.gameserver.network.aion.serverpackets.SM_SYSTEM_MESSAGE;
+import com.aionemu.gameserver.utils.PacketSendUtility;
+
+import java.sql.Timestamp;
+
+import javax.xml.bind.annotation.XmlAccessType;
+import javax.xml.bind.annotation.XmlAccessorType;
+import javax.xml.bind.annotation.XmlAttribute;
+import javax.xml.bind.annotation.XmlType;
+
+/**
+ * @author Alex
+ */
+@XmlAccessorType(XmlAccessType.FIELD)
+@XmlType(name = "SealAction")
+public class SealAction extends AbstractItemAction {
+
+    @XmlAttribute(name = "day")
+    protected int day;
+
+    @XmlAttribute(name = "maxcount")
+    protected int maxcount;
+
+    @XmlAttribute(name = "unseal")
+    protected boolean unseal;
+
+    @Override
+    public boolean canAct(Player player, Item parentItem, Item targetItem) {
+        if (targetItem.getSealTime() != null && day != 0) {
+            PacketSendUtility.sendPacket(player, new SM_SYSTEM_MESSAGE(1400830, new DescriptionId(parentItem.getNameId())));
+            long d = (targetItem.getSealTime().getTime() - System.currentTimeMillis()) / 1000 / 60 / 60 / 24;
+            PacketSendUtility.sendPacket(player, new SM_SYSTEM_MESSAGE(1400804, d));
+            return false;
+        }
+        if (maxcount > 0) {
+            for (Item item : player.getAllItems()) {
+                if (item.getSeal() == 1 && item.getSealTime() != null) {
+                    player.sealcount++;
+                }
+            }
+            if (player.sealcount >= 3) {
+                PacketSendUtility.sendPacket(player, new SM_SYSTEM_MESSAGE(1400828, new DescriptionId(targetItem.getNameId())));
+                return false;
+            }
+        }
+        if (targetItem.getSeal() == 2) {
+            PacketSendUtility.sendPacket(player, new SM_SYSTEM_MESSAGE(1400901, new DescriptionId(targetItem.getNameId())));
+            return false;
+        }
+        //TODO
+        //1401545
+        return true;
+    }
+
+    @Override
+    public void act(final Player player,final Item parentItem,final Item targetItem) {
+        if (unseal && day != 0) {
+            int free = (3 - player.sealcount);
+            PacketSendUtility.sendPacket(player, new SM_SYSTEM_MESSAGE(1400805, free));
+        }
+        PacketSendUtility.broadcastPacket(player, new SM_ITEM_USAGE_ANIMATION(player.getObjectId(), parentItem.getObjectId(), parentItem.getItemTemplate().getTemplateId(), 5000, 0, 0), true);
+        final ItemUseObserver observer = new ItemUseObserver() {
+
+            @Override
+            public void abort() {
+                player.getController().cancelTask(TaskId.ITEM_USE);
+                player.removeItemCoolDown(parentItem.getItemTemplate().getUseLimits().getDelayId());
+                PacketSendUtility.broadcastPacket(player, new SM_ITEM_USAGE_ANIMATION(player.getObjectId(), parentItem.getObjectId(), parentItem.getItemTemplate().getTemplateId(), 0, 2, 0), true);
+                player.getObserveController().removeObserver(this);
+                PacketSendUtility.sendPacket(player, new SM_SYSTEM_MESSAGE(!unseal ? 1400798 : 1400829, new DescriptionId(targetItem.getNameId())));
+                if (!unseal) {
+                    PacketSendUtility.sendPacket(player, new SM_SYSTEM_MESSAGE(1400831, new DescriptionId(targetItem.getNameId())));
+                }
+            }
+        };
+        player.getObserveController().attach(observer);
+        player.getController().addTask(TaskId.ITEM_USE, ThreadPoolManager.getInstance().schedule(new Runnable() {
+            @Override
+            public void run() {
+                player.getObserveController().removeObserver(observer);
+                if (/*!unseal &&*/!player.getInventory().decreaseByItemId(parentItem.getItemId(), 1)) {
+                    PacketSendUtility.broadcastPacket(player, new SM_ITEM_USAGE_ANIMATION(player.getObjectId(), parentItem.getObjectId(), parentItem.getItemId(), 0, 1, 1), true);
+                    return;
+                }
+                if (day != 0) {
+                    targetItem.setSealTime(new Timestamp(System.currentTimeMillis() + (day * 1L) * 24 * 60 * 60 * 1000));
+                    PacketSendUtility.sendPacket(player, new SM_SYSTEM_MESSAGE(1400804, 7));
+                } else {
+                    targetItem.setSeal(unseal ? 0 : 1);
+                    if (unseal) {
+                        targetItem.setSealTime(null);
+                        PacketSendUtility.sendPacket(player, new SM_SYSTEM_MESSAGE(1400808, new DescriptionId(targetItem.getNameId())));
+                    }
+                }
+                PacketSendUtility.broadcastPacket(player, new SM_ITEM_USAGE_ANIMATION(player.getObjectId(), parentItem.getObjectId(), parentItem.getItemId(), 0, 1, 1), true);
+                PacketSendUtility.sendPacket(player, new SM_INVENTORY_UPDATE_ITEM(player, targetItem));
+                if (!unseal) {
+                    PacketSendUtility.sendPacket(player, new SM_SYSTEM_MESSAGE(1400797, new DescriptionId(targetItem.getNameId())));
+                }
+            }
+        }, 5000));
+    }
+}
Index: src/com/aionemu/gameserver/model/templates/item/actions/SkillUseAction.java
===================================================================
--- src/com/aionemu/gameserver/model/templates/item/actions/SkillUseAction.java	(revision 292)
+++ src/com/aionemu/gameserver/model/templates/item/actions/SkillUseAction.java	(working copy)
@@ -66,6 +66,10 @@
         if (skill == null) {
             return false;
         }
+        if (parentItem.getSeal() != 0) {
+            PacketSendUtility.sendPacket(player, new SM_SYSTEM_MESSAGE(1400835));
+            return false;
+        }
         int nameId = parentItem.getItemTemplate().getNameId();
         byte levelRestrict = parentItem.getItemTemplate().getMaxLevelRestrict(player);
         if (levelRestrict != 0) {
Index: src/com/aionemu/gameserver/network/aion/iteminfo/GeneralInfoBlobEntry.java
===================================================================
--- src/com/aionemu/gameserver/network/aion/iteminfo/GeneralInfoBlobEntry.java	(revision 292)
+++ src/com/aionemu/gameserver/network/aion/iteminfo/GeneralInfoBlobEntry.java	(working copy)
@@ -45,7 +45,7 @@
         writeD(buf, item.getExpireTimeRemaining()); // Disappears time
         writeD(buf, 0);
         writeD(buf, item.getTemporaryExchangeTimeRemaining());
-        writeH(buf, 0);
+        writeH(buf, item.getSeal()); // Seal item
         writeD(buf, 0);
     }
 
Index: src/com/aionemu/gameserver/network/loginserver/serverpackets/SM_PTRANSFER_CONTROL.java
===================================================================
--- src/com/aionemu/gameserver/network/loginserver/serverpackets/SM_PTRANSFER_CONTROL.java	(revision 292)
+++ src/com/aionemu/gameserver/network/loginserver/serverpackets/SM_PTRANSFER_CONTROL.java	(working copy)
@@ -219,6 +219,8 @@
                     }
                     writeD(item.getColorExpireTime());
                     writeD(item.getBonusNumber());
+                    writeD(item.getSeal());
+                    writeQ(item.getSealTime().getTime());
                 }
 
                 inv = DAOManager.getDAO(InventoryDAO.class).loadStorageDirect(player.getObjectId(), StorageType.REGULAR_WAREHOUSE);
Index: src/com/aionemu/gameserver/services/player/PlayerEnterWorldService.java
===================================================================
--- src/com/aionemu/gameserver/services/player/PlayerEnterWorldService.java	(revision 292)
+++ src/com/aionemu/gameserver/services/player/PlayerEnterWorldService.java	(working copy)
@@ -22,6 +22,7 @@
 import com.aionemu.gameserver.configs.main.*;
 import com.aionemu.gameserver.dao.*;
 import com.aionemu.gameserver.model.ChatType;
+import com.aionemu.gameserver.model.DescriptionId;
 import com.aionemu.gameserver.model.Race;
 import com.aionemu.gameserver.model.TaskId;
 import com.aionemu.gameserver.model.account.Account;
@@ -670,15 +671,35 @@
                 IStorage storage = player.getStorage(st.getId());
                 if (storage != null) {
                     for (Item item : storage.getItemsWithKinah()) {
-                        if (item.getExpireTime() > 0) 
+                        if (item.getExpireTime() > 0) {
                             ExpireTimerTask.getInstance().addTask(item, player);                       
+                        }
+                        if (item.getSealTime() != null) {
+                            if (item.getSeal() == 1 && item.getSealTime().getTime() < System.currentTimeMillis()) {
+                                item.setSeal(0);
+                                item.setSealTime(null);
+                                PacketSendUtility.sendPacket(player, new SM_SYSTEM_MESSAGE(1400808, new DescriptionId(item.getNameId())));
+                            }
+                            long day = (item.getSealTime().getTime() - System.currentTimeMillis()) / 1000 / 60 / 60 / 24;
+                            PacketSendUtility.sendPacket(player, new SM_SYSTEM_MESSAGE(1400807, new DescriptionId(item.getNameId()), day));
+                        }
                     }
                 }
             }
 
             for (Item item : player.getEquipment().getEquippedItems()) {
-                if (item.getExpireTime() > 0) 
+                if (item.getExpireTime() > 0) {
                     ExpireTimerTask.getInstance().addTask(item, player);               
+                }
+                if (item.getSealTime() != null) {
+                    if (item.getSeal() == 1 && item.getSealTime().getTime() < System.currentTimeMillis()) {
+                        item.setSeal(0);
+                        item.setSealTime(null);
+                        PacketSendUtility.sendPacket(player, new SM_SYSTEM_MESSAGE(1400808, new DescriptionId(item.getNameId())));
+                    }
+                    long day = (item.getSealTime().getTime() - System.currentTimeMillis()) / 1000 / 60 / 60 / 24;
+                    PacketSendUtility.sendPacket(player, new SM_SYSTEM_MESSAGE(1400807, new DescriptionId(item.getNameId()), day));
+                }
             }
 
             player.getEquipment().checkRankLimitItems(); // Remove items after offline changed rank
Index: src/com/aionemu/gameserver/services/player/PlayerLeaveWorldService.java
===================================================================
--- src/com/aionemu/gameserver/services/player/PlayerLeaveWorldService.java	(revision 292)
+++ src/com/aionemu/gameserver/services/player/PlayerLeaveWorldService.java	(working copy)
@@ -150,7 +150,7 @@
         } else if (player.getCommonData().isInitialGameStats() == 1) {
             DAOManager.getDAO(PlayerGameStatsDAO.class).updatePlayerGameStat(player);
         }
-
+        
         PlayerGroupService.onPlayerLogout(player);
         PlayerAllianceService.onPlayerLogout(player);
         // fix legion warehouse exploits
Index: src/com/aionemu/gameserver/services/transfers/CMT_CHARACTER_INFORMATION.java
===================================================================
--- src/com/aionemu/gameserver/services/transfers/CMT_CHARACTER_INFORMATION.java	(revision 292)
+++ src/com/aionemu/gameserver/services/transfers/CMT_CHARACTER_INFORMATION.java	(working copy)
@@ -51,9 +51,12 @@
 import com.aionemu.gameserver.utils.idfactory.IDFactory;
 import com.aionemu.gameserver.world.World;
 import com.aionemu.gameserver.world.WorldPosition;
+
 import javolution.util.FastList;
+
 import org.slf4j.Logger;
 
+import java.sql.Timestamp;
 import java.util.List;
 
 /**
@@ -201,6 +204,8 @@
             boolean itemPacked = readD() == 1;
             boolean itemAmplified = readD() == 1;
             int buffSkill = readH();
+            int seal = readD();
+            long sealTime = readQ();			
 
             if (PlayerTransferConfig.ALLOW_INV) {
                 ItemTemplate template = DataManager.ITEM_DATA.getItemTemplate(itemId);
@@ -216,7 +221,7 @@
                 int newId = IDFactory.getInstance().nextId();
                 // bonus probably is lost, don't know [RR]
                 // dye expiration is lost
-                Item item = new Item(newId, itemId, itemCnt, itemColor, colorExpires, itemCreator, itemExpireTime, itemActivationCnt, itemEquipped, itemSoulBound, equipSlot, location, enchant, skinId, fusionId, optSocket, optFusion, charge, bonusNum, randomNum, packNum, authorizeNum, itemPacked, itemAmplified, buffSkill);
+                Item item = new Item(newId, itemId, itemCnt, itemColor, colorExpires, itemCreator, itemExpireTime, itemActivationCnt, itemEquipped, itemSoulBound, equipSlot, location, enchant, skinId, fusionId, optSocket, optFusion, charge, bonusNum, randomNum, packNum, authorizeNum, itemPacked, itemAmplified, buffSkill, seal, new Timestamp(sealTime));
                 if (manastones.size() > 0) {
                     for (int[] stone : manastones) {
                         ItemSocketService.addManaStone(item, stone[0], stone[1]);
@@ -280,6 +285,8 @@
             boolean itemPacked = readD() == 1;
             boolean itemAmplified = readD() == 1;
             int buffSkill = readH();
+            int seal = readD();
+            long sealTime = readQ();			
 
             if (PlayerTransferConfig.ALLOW_WAREHOUSE) {
                 ItemTemplate template = DataManager.ITEM_DATA.getItemTemplate(itemId);
@@ -295,7 +302,7 @@
                 int newId = IDFactory.getInstance().nextId();
                 // bonus probably is lost, don't know [RR]
                 // dye expiration is lost
-                Item item = new Item(newId, itemId, itemCnt, itemColor, colorExpires, itemCreator, itemExpireTime, itemActivationCnt, itemEquipped, itemSoulBound, equipSlot, location, enchant, skinId, fusionId, optSocket, optFusion, charge, bonusNum, randomNum, packNum, authorizeNum, itemPacked, itemAmplified, buffSkill);
+                Item item = new Item(newId, itemId, itemCnt, itemColor, colorExpires, itemCreator, itemExpireTime, itemActivationCnt, itemEquipped, itemSoulBound, equipSlot, location, enchant, skinId, fusionId, optSocket, optFusion, charge, bonusNum, randomNum, packNum, authorizeNum, itemPacked, itemAmplified, buffSkill, seal, new Timestamp(sealTime));
                 if (manastones.size() > 0) {
                     for (int[] stone : manastones) {
                         ItemSocketService.addManaStone(item, stone[0], stone[1]);
